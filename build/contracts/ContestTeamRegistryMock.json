{
  "contractName": "ContestTeamRegistryMock",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "teamId",
          "type": "uint256"
        }
      ],
      "name": "getTeam",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "teamId",
          "type": "uint256"
        }
      ],
      "name": "approveTeam",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "teamIds",
          "type": "uint256[]"
        }
      ],
      "name": "reproveTeams",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "teams",
      "outputs": [
        {
          "name": "id",
          "type": "uint256"
        },
        {
          "name": "name",
          "type": "bytes32"
        },
        {
          "name": "teamAddress",
          "type": "address"
        },
        {
          "name": "proposalData",
          "type": "bytes32"
        },
        {
          "name": "approved",
          "type": "bool"
        },
        {
          "name": "grade",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "teamAddress",
          "type": "address"
        }
      ],
      "name": "getTeamByAddress",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getSubmissionStatus",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "openSubmission",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "teamName",
          "type": "bytes32"
        },
        {
          "name": "teamAddress",
          "type": "address"
        },
        {
          "name": "proposalData",
          "type": "bytes32"
        }
      ],
      "name": "registerTeam",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "closeRegistration",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "openRegistration",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRegistrationStatus",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "teamId",
          "type": "uint256"
        },
        {
          "name": "proposalData",
          "type": "bytes32"
        }
      ],
      "name": "updateProposalData",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "teamId",
          "type": "uint256"
        }
      ],
      "name": "reproveTeam",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "closeSubmission",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "teamId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "teamName",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "teamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "TeamRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "RegistrationStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SubmissionStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "teamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "teamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "proposalData",
          "type": "bytes32"
        }
      ],
      "name": "TeamProposalUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "teamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "teamAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "TeamStatusUpdated",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getApprovedTeamsCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"getTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"approveTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"teamIds\",\"type\":\"uint256[]\"}],\"name\":\"reproveTeams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teams\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"teamAddress\",\"type\":\"address\"},{\"name\":\"proposalData\",\"type\":\"bytes32\"},{\"name\":\"approved\",\"type\":\"bool\"},{\"name\":\"grade\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"teamAddress\",\"type\":\"address\"}],\"name\":\"getTeamByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSubmissionStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openSubmission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"teamName\",\"type\":\"bytes32\"},{\"name\":\"teamAddress\",\"type\":\"address\"},{\"name\":\"proposalData\",\"type\":\"bytes32\"}],\"name\":\"registerTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getApprovedTeamsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegistrationStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"teamId\",\"type\":\"uint256\"},{\"name\":\"proposalData\",\"type\":\"bytes32\"}],\"name\":\"updateProposalData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"reproveTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeSubmission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"teamId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"teamName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"TeamRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"RegistrationStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SubmissionStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"teamId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proposalData\",\"type\":\"bytes32\"}],\"name\":\"TeamProposalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"teamId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"TeamStatusUpdated\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"approveTeam(uint256)\":{\"details\":\"Should be overwritten on inherited contract to add modifier or require statements for access control.\",\"params\":{\"teamId\":\"{uint256} the ids of the teams to be approved\"}},\"closeRegistration()\":{\"details\":\"Should be overwritten on inherited contract to add modifier or require statements for access control.\"},\"closeSubmission()\":{\"details\":\"Should be overwritten on inherited contract to add modifier or require statements for access control.\"},\"getRegistrationStatus()\":{\"return\":\"{bool} returns {true} if enabled; otherwise, {false}.\"},\"getTeam(uint256)\":{\"params\":{\"teamId\":\"{uint256} the team's unique identifier returned on registration\"},\"return\":\"{bytes32} team's name{address} team's address{bytes32} team's proposal data{bool} team's status: {true} for approved; {false} for reproved;{uint256} team's grade\"},\"getTeamByAddress(address)\":{\"params\":{\"teamAddress\":\"{address} the team's contract address used on registration\"},\"return\":\"{bytes32} team's name{address} team's address{bytes32} team's proposal data{bool} team's status: {true} for approved; {false} for reproved;{uint256} team's grade\"},\"openRegistration()\":{\"details\":\"Should be overwritten on inherited contract to add modifier or require statements for access control.\"},\"openSubmission()\":{\"details\":\"Should be overwritten on inherited contract to add modifier or require statements for access control.\"},\"registerTeam(bytes32,address,bytes32)\":{\"details\":\"Registration process must be open.\",\"params\":{\"teamName\":\"{bytes32} team's proposal data; could be a hash for a file  on IPFS or for a github link; not required\"}},\"reproveTeam(uint256)\":{\"details\":\"Should be overwritten on inherited contract to add modifier or require statements for access control.\",\"params\":{\"teamId\":\"{uint256} the ids of the teams to be reproved\"}},\"reproveTeams(uint256[])\":{\"details\":\"Should be overwritten on inherited contract to add modifier or require statements for access control.\",\"params\":{\"teamIds\":\"{uint256[]} an array containing the ids of the teams to be reproved\"}},\"updateProposalData(uint256,bytes32)\":{\"params\":{\"proposalData\":\"the updated data for the team's proposal\",\"teamId\":\"team's unique identifier; required\"}}}},\"userdoc\":{\"methods\":{\"approveTeam(uint256)\":{\"notice\":\"(re)approves a team in participating in the contest\"},\"closeRegistration()\":{\"notice\":\"Closes the registration process\"},\"closeSubmission()\":{\"notice\":\"Closes the proposal submission process\"},\"getRegistrationStatus()\":{\"notice\":\"Gets the registration status\"},\"getTeam(uint256)\":{\"notice\":\"Returns the stored information of a team\"},\"getTeamByAddress(address)\":{\"notice\":\"Returns the stored information of a team, based on a provided address\"},\"openRegistration()\":{\"notice\":\"Opens the registration process\"},\"openSubmission()\":{\"notice\":\"Opens the proposal submission process\"},\"registerTeam(bytes32,address,bytes32)\":{\"notice\":\"Registers a new team in the contest registry.\"},\"reproveTeam(uint256)\":{\"notice\":\"reproves a team from participating in the contest\"},\"reproveTeams(uint256[])\":{\"notice\":\"reprove teams from participating in the contest\"},\"updateProposalData(uint256,bytes32)\":{\"notice\":\"Updates the proposal data for a specific team.\"}}}},\"settings\":{\"compilationTarget\":{\"/home/odisi/dev/projects/hackapay/contracts/mocks/ContestTeamRegistryMock.sol\":\"ContestTeamRegistryMock\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/odisi/dev/projects/hackapay/contracts/core/ContestTeamRegistry.sol\":{\"keccak256\":\"0x8d42080838fd3d10eaf699328eb7e47d3aff2b3b8b441af646b03c4f5585a3ea\",\"urls\":[\"bzzr://15800a5d61b54b52978a66ef81c0f0b5f51fdbefe7371dc323b8e7991ef8e0da\"]},\"/home/odisi/dev/projects/hackapay/contracts/mocks/ContestTeamRegistryMock.sol\":{\"keccak256\":\"0xa6364c08f026c54b91444a72401b90830090ac9b22edd2c7680463e76e61af41\",\"urls\":[\"bzzr://bcf245d1a5900632e020463a87e8301b0a3eee2f902a51ae9865fce3ba95eb2e\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x4ccf2d7b51873db1ccfd54ca2adae5eac3b184f9699911ed4490438419f1c690\",\"urls\":[\"bzzr://1604f5b6d6e916c154efd8c6720cda069e5ba32dfa0a9dedf2b42e5b02d07f89\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611236806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c80637385712c11610097578063e35fb24111610066578063e35fb241146102da578063eaf2f9cd146102e2578063f540548b14610305578063ffc6ff1e14610322576100f4565b80637385712c1461027e5780637dc673bc146102c2578063b103b43a146102ca578063d06e4ee7146102d2576100f4565b80633ed2b77a116100d35780633ed2b77a146101da5780634ea701a81461023457806354e1db2b1461025a57806358e2f50e14610276576100f4565b80628e0f1b146100f957806324ba9fab1461014b578063288c4a461461016a575b600080fd5b6101166004803603602081101561010f57600080fd5b503561032a565b604080519586526001600160a01b03909416602086015284840192909252151560608401526080830152519081900360a00190f35b6101686004803603602081101561016157600080fd5b503561041a565b005b6101686004803603602081101561018057600080fd5b81019060208101813564010000000081111561019b57600080fd5b8201836020820111156101ad57600080fd5b803590602001918460208302840111640100000000831117156101cf57600080fd5b509092509050610426565b6101f7600480360360208110156101f057600080fd5b5035610466565b6040805196875260208701959095526001600160a01b039093168585015260608501919091521515608084015260a0830152519081900360c00190f35b6101166004803603602081101561024a57600080fd5b50356001600160a01b03166104b9565b6102626105a0565b604080519115158252519081900360200190f35b6101686105ae565b6102b06004803603606081101561029457600080fd5b508035906001600160a01b036020820135169060400135610618565b60408051918252519081900360200190f35b610168610a09565b6102b0610a6b565b610168610a71565b610262610ad4565b610168600480360360408110156102f857600080fd5b5080359060200135610add565b6101686004803603602081101561031b57600080fd5b5035610c67565b610168610c70565b60008060008060008561033c81610cd7565b6103855760408051600160e51b62461bcd02815260206004820152600f60248201526001608a1b6e125b9d985b1a59081d19585b481a5902604482015290519081900360640190fd5b61038d6111d5565b6001888154811061039a57fe5b60009182526020918290206040805160c08101825260069390930290910180548352600181015493830184905260028101546001600160a01b0316918301829052600381015460608401819052600482015460ff1615156080850181905260059092015460a0909401849052939c919b5092995091975095509350505050565b61042381610ce2565b50565b610462828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610e3592505050565b5050565b6001818154811061047357fe5b600091825260209091206006909102018054600182015460028301546003840154600485015460059095015493955091936001600160a01b039091169260ff9091169086565b6000808080806001600160a01b03861661051d5760408051600160e51b62461bcd02815260206004820152601460248201527f496e76616c6964207a65726f2061646472657373000000000000000000000000604482015290519081900360640190fd5b6105256111d5565b505050506001600160a01b0392831660009081526020818152604091829020825160c0810184528154815260018201549281018390526002820154909616928601839052600381015460608701819052600482015460ff1615156080880181905260059092015460a090970187905291969295919450925090565b600354610100900460ff1690565b600354610100900460ff161561060e5760408051600160e51b62461bcd02815260206004820152601260248201527f5375626d697373696f6e206973206f70656e0000000000000000000000000000604482015290519081900360640190fd5b610616610e65565b565b60035460009060ff166106755760408051600160e51b62461bcd02815260206004820152601660248201527f526567697374726174696f6e20697320636c6f73656400000000000000000000604482015290519081900360640190fd5b8360001a60f81b6001600160f81b0319166106da5760408051600160e51b62461bcd02815260206004820152601960248201527f5465616d206e616d652063616e6e6f7420626520656d70747900000000000000604482015290519081900360640190fd5b6001600160a01b0383166107385760408051600160e51b62461bcd02815260206004820152601b60248201527f5465616d20616464726573732063616e6e6f74206265207a65726f0000000000604482015290519081900360640190fd5b6001600160a01b0383811660009081526020819052604090206002015416156107ab5760408051600160e51b62461bcd02815260206004820152601760248201527f5465616d20616c72656164792072656769737465726564000000000000000000604482015290519081900360640190fd5b6001546107b66111d5565b506040805160c081018252828152602081018781526001600160a01b0387811693830193845260608301878152600160808501818152600060a08701818152835480850185559184905287517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf660069093029283015595517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf782015596517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf8880180546001600160a01b031916919095161790935590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf986015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfa8501805460ff191691151591909117905590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfb9093019290925581549091908390811061091e57fe5b600091825260208083206001600160a01b03808a1685529184905260409093206006909202909201805482556001808201548184015560028083015481850180546001600160a01b031916919096161790945560038083015490840155600480830154908401805460ff909216151560ff19909216919091179055600591820154919092015590546109b59163ffffffff610eb516565b600255604080518781526001602082015281516001600160a01b0388169285927f443b25596b838f2775d21b1153b87036f08c058fd4702446f1136ab26e5f3b90929081900390910190a350949350505050565b60035460ff16610a635760408051600160e51b62461bcd02815260206004820152601660248201527f526567697374726174696f6e20697320636c6f73656400000000000000000000604482015290519081900360640190fd5b610616610f19565b60025490565b60035460ff1615610acc5760408051600160e51b62461bcd02815260206004820152601460248201527f526567697374726174696f6e206973206f70656e000000000000000000000000604482015290519081900360640190fd5b610616610f59565b60035460ff1690565b81610ae781610cd7565b610b305760408051600160e51b62461bcd02815260206004820152600f60248201526001608a1b6e125b9d985b1a59081d19585b481a5902604482015290519081900360640190fd5b82610b3a81610fa3565b610b8e5760408051600160e51b62461bcd02815260206004820152601460248201527f5465616d206973206e6f7420617070726f766564000000000000000000000000604482015290519081900360640190fd5b600354610100900460ff16610bed5760408051600160e51b62461bcd02815260206004820152601460248201527f5375626d697373696f6e20697320636c6f736564000000000000000000000000604482015290519081900360640190fd5b600060018581548110610bfc57fe5b60009182526020918290206003600690920201908101869055600281015481546040805189815290519395506001600160a01b039092169390927fa44de9e6ce79675199796005de8516704078af25aaf78ab4be180213882560ee9281900390910190a35050505050565b6104238161103d565b600354610100900460ff16610ccf5760408051600160e51b62461bcd02815260206004820152601460248201527f5375626d697373696f6e20697320636c6f736564000000000000000000000000604482015290519081900360640190fd5b61061661112a565b60015481105b919050565b80610cec81610cd7565b610d355760408051600160e51b62461bcd02815260206004820152600f60248201526001608a1b6e125b9d985b1a59081d19585b481a5902604482015290519081900360640190fd5b81610d3f81610fa3565b15610d945760408051600160e51b62461bcd02815260206004820152601560248201527f5465616d206973206e6f7420726570726f7665642e0000000000000000000000604482015290519081900360640190fd5b600060018481548110610da357fe5b600091825260209091206004600690920201908101805460ff19166001908117909155600254919250610ddc919063ffffffff610eb516565b6002908155810154815460048301546040805160ff90921615158252516001600160a01b03909316927fd903780bcf5bcea81714ac3450a34cb3de7b0735a59883e1eb90edd901a54ad49181900360200190a350505050565b60005b815181101561046257610e5d828281518110610e5057fe5b602002602001015161103d565b600101610e38565b6003805461ff00191661010090811791829055604080519190920460ff161515815290517f48fbf5c7b70581e7e2145562de373e14a5af56d09f9b96d73545d0d35f71f0889181900360200190a1565b600082820183811015610f125760408051600160e51b62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6003805460ff19169055604080516000815290517f78b477400a612eb4ec0a343596323cccfac06b27624264a549d8322c736d055c9181900360200190a1565b6003805460ff1916600117908190556040805160ff9290921615158252517f78b477400a612eb4ec0a343596323cccfac06b27624264a549d8322c736d055c9181900360200190a1565b6000610fae82610cd7565b610fba57506000610cdd565b610fc26111d5565b60018381548110610fcf57fe5b60009182526020918290206040805160c08101825260069093029091018054835260018101549383019390935260028301546001600160a01b03169082015260038201546060820152600482015460ff1615156080820181905260059092015460a090910152915050919050565b8061104781610cd7565b6110905760408051600160e51b62461bcd02815260206004820152600f60248201526001608a1b6e125b9d985b1a59081d19585b481a5902604482015290519081900360640190fd5b8161109a81610fa3565b6110ee5760408051600160e51b62461bcd02815260206004820152601460248201527f5465616d206973206e6f7420617070726f766564000000000000000000000000604482015290519081900360640190fd5b6000600184815481106110fd57fe5b6000918252602090912060069091020160048101805460ff19169055600254909150610ddc906001611175565b6003805461ff001916908190556040805161010090920460ff1615158252517f48fbf5c7b70581e7e2145562de373e14a5af56d09f9b96d73545d0d35f71f0889181900360200190a1565b6000828211156111cf5760408051600160e51b62461bcd02815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091529056fea165627a7a723058209665351eaec8f93e2f698570e47266a1cb76e777169678345dc33c60e876499a0029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f45760003560e01c80637385712c11610097578063e35fb24111610066578063e35fb241146102da578063eaf2f9cd146102e2578063f540548b14610305578063ffc6ff1e14610322576100f4565b80637385712c1461027e5780637dc673bc146102c2578063b103b43a146102ca578063d06e4ee7146102d2576100f4565b80633ed2b77a116100d35780633ed2b77a146101da5780634ea701a81461023457806354e1db2b1461025a57806358e2f50e14610276576100f4565b80628e0f1b146100f957806324ba9fab1461014b578063288c4a461461016a575b600080fd5b6101166004803603602081101561010f57600080fd5b503561032a565b604080519586526001600160a01b03909416602086015284840192909252151560608401526080830152519081900360a00190f35b6101686004803603602081101561016157600080fd5b503561041a565b005b6101686004803603602081101561018057600080fd5b81019060208101813564010000000081111561019b57600080fd5b8201836020820111156101ad57600080fd5b803590602001918460208302840111640100000000831117156101cf57600080fd5b509092509050610426565b6101f7600480360360208110156101f057600080fd5b5035610466565b6040805196875260208701959095526001600160a01b039093168585015260608501919091521515608084015260a0830152519081900360c00190f35b6101166004803603602081101561024a57600080fd5b50356001600160a01b03166104b9565b6102626105a0565b604080519115158252519081900360200190f35b6101686105ae565b6102b06004803603606081101561029457600080fd5b508035906001600160a01b036020820135169060400135610618565b60408051918252519081900360200190f35b610168610a09565b6102b0610a6b565b610168610a71565b610262610ad4565b610168600480360360408110156102f857600080fd5b5080359060200135610add565b6101686004803603602081101561031b57600080fd5b5035610c67565b610168610c70565b60008060008060008561033c81610cd7565b6103855760408051600160e51b62461bcd02815260206004820152600f60248201526001608a1b6e125b9d985b1a59081d19585b481a5902604482015290519081900360640190fd5b61038d6111d5565b6001888154811061039a57fe5b60009182526020918290206040805160c08101825260069390930290910180548352600181015493830184905260028101546001600160a01b0316918301829052600381015460608401819052600482015460ff1615156080850181905260059092015460a0909401849052939c919b5092995091975095509350505050565b61042381610ce2565b50565b610462828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610e3592505050565b5050565b6001818154811061047357fe5b600091825260209091206006909102018054600182015460028301546003840154600485015460059095015493955091936001600160a01b039091169260ff9091169086565b6000808080806001600160a01b03861661051d5760408051600160e51b62461bcd02815260206004820152601460248201527f496e76616c6964207a65726f2061646472657373000000000000000000000000604482015290519081900360640190fd5b6105256111d5565b505050506001600160a01b0392831660009081526020818152604091829020825160c0810184528154815260018201549281018390526002820154909616928601839052600381015460608701819052600482015460ff1615156080880181905260059092015460a090970187905291969295919450925090565b600354610100900460ff1690565b600354610100900460ff161561060e5760408051600160e51b62461bcd02815260206004820152601260248201527f5375626d697373696f6e206973206f70656e0000000000000000000000000000604482015290519081900360640190fd5b610616610e65565b565b60035460009060ff166106755760408051600160e51b62461bcd02815260206004820152601660248201527f526567697374726174696f6e20697320636c6f73656400000000000000000000604482015290519081900360640190fd5b8360001a60f81b6001600160f81b0319166106da5760408051600160e51b62461bcd02815260206004820152601960248201527f5465616d206e616d652063616e6e6f7420626520656d70747900000000000000604482015290519081900360640190fd5b6001600160a01b0383166107385760408051600160e51b62461bcd02815260206004820152601b60248201527f5465616d20616464726573732063616e6e6f74206265207a65726f0000000000604482015290519081900360640190fd5b6001600160a01b0383811660009081526020819052604090206002015416156107ab5760408051600160e51b62461bcd02815260206004820152601760248201527f5465616d20616c72656164792072656769737465726564000000000000000000604482015290519081900360640190fd5b6001546107b66111d5565b506040805160c081018252828152602081018781526001600160a01b0387811693830193845260608301878152600160808501818152600060a08701818152835480850185559184905287517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf660069093029283015595517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf782015596517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf8880180546001600160a01b031916919095161790935590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf986015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfa8501805460ff191691151591909117905590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfb9093019290925581549091908390811061091e57fe5b600091825260208083206001600160a01b03808a1685529184905260409093206006909202909201805482556001808201548184015560028083015481850180546001600160a01b031916919096161790945560038083015490840155600480830154908401805460ff909216151560ff19909216919091179055600591820154919092015590546109b59163ffffffff610eb516565b600255604080518781526001602082015281516001600160a01b0388169285927f443b25596b838f2775d21b1153b87036f08c058fd4702446f1136ab26e5f3b90929081900390910190a350949350505050565b60035460ff16610a635760408051600160e51b62461bcd02815260206004820152601660248201527f526567697374726174696f6e20697320636c6f73656400000000000000000000604482015290519081900360640190fd5b610616610f19565b60025490565b60035460ff1615610acc5760408051600160e51b62461bcd02815260206004820152601460248201527f526567697374726174696f6e206973206f70656e000000000000000000000000604482015290519081900360640190fd5b610616610f59565b60035460ff1690565b81610ae781610cd7565b610b305760408051600160e51b62461bcd02815260206004820152600f60248201526001608a1b6e125b9d985b1a59081d19585b481a5902604482015290519081900360640190fd5b82610b3a81610fa3565b610b8e5760408051600160e51b62461bcd02815260206004820152601460248201527f5465616d206973206e6f7420617070726f766564000000000000000000000000604482015290519081900360640190fd5b600354610100900460ff16610bed5760408051600160e51b62461bcd02815260206004820152601460248201527f5375626d697373696f6e20697320636c6f736564000000000000000000000000604482015290519081900360640190fd5b600060018581548110610bfc57fe5b60009182526020918290206003600690920201908101869055600281015481546040805189815290519395506001600160a01b039092169390927fa44de9e6ce79675199796005de8516704078af25aaf78ab4be180213882560ee9281900390910190a35050505050565b6104238161103d565b600354610100900460ff16610ccf5760408051600160e51b62461bcd02815260206004820152601460248201527f5375626d697373696f6e20697320636c6f736564000000000000000000000000604482015290519081900360640190fd5b61061661112a565b60015481105b919050565b80610cec81610cd7565b610d355760408051600160e51b62461bcd02815260206004820152600f60248201526001608a1b6e125b9d985b1a59081d19585b481a5902604482015290519081900360640190fd5b81610d3f81610fa3565b15610d945760408051600160e51b62461bcd02815260206004820152601560248201527f5465616d206973206e6f7420726570726f7665642e0000000000000000000000604482015290519081900360640190fd5b600060018481548110610da357fe5b600091825260209091206004600690920201908101805460ff19166001908117909155600254919250610ddc919063ffffffff610eb516565b6002908155810154815460048301546040805160ff90921615158252516001600160a01b03909316927fd903780bcf5bcea81714ac3450a34cb3de7b0735a59883e1eb90edd901a54ad49181900360200190a350505050565b60005b815181101561046257610e5d828281518110610e5057fe5b602002602001015161103d565b600101610e38565b6003805461ff00191661010090811791829055604080519190920460ff161515815290517f48fbf5c7b70581e7e2145562de373e14a5af56d09f9b96d73545d0d35f71f0889181900360200190a1565b600082820183811015610f125760408051600160e51b62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6003805460ff19169055604080516000815290517f78b477400a612eb4ec0a343596323cccfac06b27624264a549d8322c736d055c9181900360200190a1565b6003805460ff1916600117908190556040805160ff9290921615158252517f78b477400a612eb4ec0a343596323cccfac06b27624264a549d8322c736d055c9181900360200190a1565b6000610fae82610cd7565b610fba57506000610cdd565b610fc26111d5565b60018381548110610fcf57fe5b60009182526020918290206040805160c08101825260069093029091018054835260018101549383019390935260028301546001600160a01b03169082015260038201546060820152600482015460ff1615156080820181905260059092015460a090910152915050919050565b8061104781610cd7565b6110905760408051600160e51b62461bcd02815260206004820152600f60248201526001608a1b6e125b9d985b1a59081d19585b481a5902604482015290519081900360640190fd5b8161109a81610fa3565b6110ee5760408051600160e51b62461bcd02815260206004820152601460248201527f5465616d206973206e6f7420617070726f766564000000000000000000000000604482015290519081900360640190fd5b6000600184815481106110fd57fe5b6000918252602090912060069091020160048101805460ff19169055600254909150610ddc906001611175565b6003805461ff001916908190556040805161010090920460ff1615158252517f48fbf5c7b70581e7e2145562de373e14a5af56d09f9b96d73545d0d35f71f0889181900360200190a1565b6000828211156111cf5760408051600160e51b62461bcd02815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091529056fea165627a7a723058209665351eaec8f93e2f698570e47266a1cb76e777169678345dc33c60e876499a0029",
  "sourceMap": "68:223:13:-;;;130:45;8:9:-1;5:2;;;30:1;27;20:12;5:2;130:45:13;68:223;;;;;;",
  "deployedSourceMap": "68:223:13:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;68:223:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3424:293:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3424:293:3;;:::i;:::-;;;;;;;-1:-1:-1;;;;;3424:293:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8272:83;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8272:83:3;;:::i;:::-;;8647:98;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8647:98:3;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;8647:98:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8647:98:3;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;-1:-1;8647:98:3;;-1:-1:-1;8647:98:3;-1:-1:-1;8647:98:3;:::i;1088:19::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1088:19:3;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;1088:19:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4157:332;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4157:332:3;-1:-1:-1;;;;;4157:332:3;;:::i;7898:101::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;7804:88;;;:::i;4872:1108::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4872:1108:3;;;-1:-1:-1;;;;;4872:1108:3;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;6719:94;;;:::i;181:107:13:-;;;:::i;6997:94:3:-;;;:::i;7228:105::-;;;:::i;6191:343::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6191:343:3;;;;;;;:::i;9016:83::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9016:83:3;;:::i;7525:88::-;;;:::i;3424:293::-;3530:7;3539;3548;3557:4;3563:7;3505:6;2617:21;2631:6;2617:13;:21::i;:::-;2609:49;;;;;-1:-1:-1;;;;;2609:49:3;;;;;;;;;;;;-1:-1:-1;;;;;2609:49:3;;;;;;;;;;;;;;;3586:16;;:::i;:::-;3605:5;3611:6;3605:13;;;;;;;;;;;;;;;;;3586:32;;;;;;;;3605:13;;;;;;;;3586:32;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3586:32:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3586:32:3;;-1:-1:-1;3586:32:3;;-1:-1:-1;3586:32:3;-1:-1:-1;3424:293:3;-1:-1:-1;;;;3424:293:3:o;8272:83::-;8328:20;8341:6;8328:12;:20::i;:::-;8272:83;:::o;8647:98::-;8716:22;8730:7;;8716:22;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;8716:13:3;;-1:-1:-1;;;8716:22:3:i;:::-;8647:98;;:::o;1088:19::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1088:19:3;;-1:-1:-1;;;;;1088:19:3;;;;;;;;;;:::o;4157:332::-;4225:7;;;;;-1:-1:-1;;;;;4285:25:3;;4277:58;;;;;-1:-1:-1;;;;;4277:58:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;4345:16;;:::i;:::-;-1:-1:-1;;;;;;;;;4364:26:3;;;:13;:26;;;;;;;;;;;;4345:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4345:45:3;-1:-1:-1;4345:45:3;4157:332::o;7898:101::-;7975:17;;;;;;;;7898:101::o;7804:88::-;2498:17;;;;;;;2497:18;2489:49;;;;;-1:-1:-1;;;;;2489:49:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;7868:17;:15;:17::i;:::-;7804:88::o;4872:1108::-;2148:19;;5016:7;;2148:19;;2140:54;;;;;-1:-1:-1;;;;;2140:54:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;5047:8;5056:1;5047:11;;;-1:-1:-1;;;;;;5047:16:3;5039:54;;;;;-1:-1:-1;;;;;5039:54:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5111:25:3;;5103:65;;;;;-1:-1:-1;;;;;5103:65:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5186:26:3;;;5236:1;5186:26;;;;;;;;;;:38;;;;:52;5178:88;;;;;-1:-1:-1;;;;;5178:88:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;5293:5;:12;5673:16;;:::i;:::-;-1:-1:-1;5692:58:3;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5692:58:3;;;;;;;;;;;;;;;5742:4;5692:58;;;;;;-1:-1:-1;5692:58:3;;;;;;27:10:-1;;23:18;;;45:23;;5760:16:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5760:16:3;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5760:16:3;;;;;;;;;;;;;;;;;;;;5815:13;;5692:58;;5742:4;5692:58;;5815:13;;;;;;;;;;;;;;-1:-1:-1;;;;;5786:26:3;;;;;;;;;;;;;5815:13;;;;;;;5786:42;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5786:42:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5786:42:3;;;;;;;;;;;;;;;;;;;5859:18;;:25;;;:22;:25;:::i;:::-;5838:18;:46;5899:51;;;;;;5945:4;5899:51;;;;;;-1:-1:-1;;;;;5899:51:3;;;5914:6;;5899:51;;;;;;;;;;;-1:-1:-1;5967:6:3;4872:1108;-1:-1:-1;;;;4872:1108:3:o;6719:94::-;2148:19;;;;2140:54;;;;;-1:-1:-1;;;;;2140:54:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;6786:20;:18;:20::i;181:107:13:-;263:18;;181:107;:::o;6997:94:3:-;2269:19;;;;2268:20;2260:53;;;;;-1:-1:-1;;;;;2260:53:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;7065:19;:17;:19::i;7228:105::-;7307:19;;;;7228:105;:::o;6191:343::-;6294:6;2617:21;2631:6;2617:13;:21::i;:::-;2609:49;;;;;-1:-1:-1;;;;;2609:49:3;;;;;;;;;;;;-1:-1:-1;;;;;2609:49:3;;;;;;;;;;;;;;;6325:6;2740:22;2755:6;2740:14;:22::i;:::-;2732:55;;;;;-1:-1:-1;;;;;2732:55:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;2383:17;;;;;;;2375:50;;;;;-1:-1:-1;;;;;2375:50:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;6372:17;6392:5;6398:6;6392:13;;;;;;;;;;;;;;;;;6415:17;6392:13;;;;;6415:17;;;:32;;;6491:16;;;;6482:7;;6462:65;;;;;;;;6392:13;;-1:-1:-1;;;;;;6491:16:3;;;;6482:7;;6462:65;;;;;;;;;;2435:1;2668;6191:343;;;:::o;9016:83::-;9072:20;9085:6;9072:12;:20::i;7525:88::-;2383:17;;;;;;;2375:50;;;;;-1:-1:-1;;;;;2375:50:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;7588:18;:16;:18::i;10472:115::-;10567:5;:12;10558:21;;10472:115;;;;:::o;9685:300::-;9744:6;2617:21;2631:6;2617:13;:21::i;:::-;2609:49;;;;;-1:-1:-1;;;;;2609:49:3;;;;;;;;;;;;-1:-1:-1;;;;;2609:49:3;;;;;;;;;;;;;;;9767:6;2870:22;2885:6;2870:14;:22::i;:::-;2869:23;2861:57;;;;;-1:-1:-1;;;;;2861:57:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;9785:17;9805:5;9811:6;9805:13;;;;;;;;;;;;;;;;9828;9805;;;;;9828;;;:20;;-1:-1:-1;;9828:20:3;9844:4;9828:20;;;;;;9879:18;;9805:13;;-1:-1:-1;9879:25:3;;:18;:25;:22;:25;:::i;:::-;9858:18;:46;;;9946:16;;;9937:7;;9964:13;;;;9919:59;;;9964:13;;;;9919:59;;;;;-1:-1:-1;;;;;9946:16:3;;;;9919:59;;;;;;;;;2928:1;2668;9685:300;;:::o;9991:168::-;10064:9;10059:94;10083:7;:14;10079:1;:18;10059:94;;;10118:24;10131:7;10139:1;10131:10;;;;;;;;;;;;;;10118:12;:24::i;:::-;10099:3;;10059:94;;9545:134;9591:17;:24;;-1:-1:-1;;9591:24:3;;;;;;;;;9630:42;;;9654:17;;;;9591:24;9654:17;9630:42;;;;;;;;;;;;;;;9545:134::o;834:176:26:-;892:7;923:5;;;946:6;;;;938:46;;;;;-1:-1:-1;;;;;938:46:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;834:176;-1:-1:-1;;;834:176:26:o;9105:144:3:-;9154:19;:27;;-1:-1:-1;;9154:27:3;;;9196:46;;;9176:5;9196:46;;;;;;;;;;;;;9105:144::o;9255:142::-;9303:19;:26;;-1:-1:-1;;9303:26:3;9325:4;9303:26;;;;;9344:46;;;9303:26;9370:19;;;;9344:46;;;;;;;;;;;;;;9255:142::o;10593:223::-;10656:4;10677:21;10691:6;10677:13;:21::i;:::-;10672:65;;-1:-1:-1;10721:5:3;10714:12;;10672:65;10747:16;;:::i;:::-;10766:5;10772:6;10766:13;;;;;;;;;;;;;;;;;10747:32;;;;;;;;10766:13;;;;;;;10747:32;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10747:32:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;10593:223:3;;;:::o;10165:301::-;10224:6;2617:21;2631:6;2617:13;:21::i;:::-;2609:49;;;;;-1:-1:-1;;;;;2609:49:3;;;;;;;;;;;;-1:-1:-1;;;;;2609:49:3;;;;;;;;;;;;;;;10247:6;2740:22;2755:6;2740:14;:22::i;:::-;2732:55;;;;;-1:-1:-1;;;;;2732:55:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;10265:17;10285:5;10291:6;10285:13;;;;;;;;;;;;;;;;;;;;;10308;;;:21;;-1:-1:-1;;10308:21:3;;;10360:18;;10285:13;;-1:-1:-1;10360:25:3;;-1:-1:-1;10360:22:3;:25::i;9403:136::-;9450:17;:25;;-1:-1:-1;;9450:25:3;;;;;9490:42;;;9450:25;9514:17;;;9450:25;9514:17;9490:42;;;;;;;;;;;;;;9403:136::o;1274:179:26:-;1332:7;1364:1;1359;:6;;1351:49;;;;;-1:-1:-1;;;;;1351:49:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1422:5:26;;;1274:179::o;68:223:13:-;;;;;;;;;-1:-1:-1;68:223:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"../core/ContestTeamRegistry.sol\";\n\ncontract ContestTeamRegistryMock is ContestTeamRegistry {\n    constructor() public ContestTeamRegistry() {}\n\n    function getApprovedTeamsCount() external view returns (uint256) {\n        return approvedTeamsCount;\n    }\n\n}\n",
  "sourcePath": "/home/odisi/dev/projects/hackapay/contracts/mocks/ContestTeamRegistryMock.sol",
  "ast": {
    "absolutePath": "/home/odisi/dev/projects/hackapay/contracts/mocks/ContestTeamRegistryMock.sol",
    "exportedSymbols": {
      "ContestTeamRegistryMock": [2675]
    },
    "id": 2676,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2657,
        "literals": ["solidity", "^", "0.5", ".0"],
        "nodeType": "PragmaDirective",
        "src": "0:23:13"
      },
      {
        "absolutePath": "/home/odisi/dev/projects/hackapay/contracts/core/ContestTeamRegistry.sol",
        "file": "../core/ContestTeamRegistry.sol",
        "id": 2658,
        "nodeType": "ImportDirective",
        "scope": 2676,
        "sourceUnit": 1715,
        "src": "25:41:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2659,
              "name": "ContestTeamRegistry",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1714,
              "src": "104:19:13",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ContestTeamRegistry_$1714",
                "typeString": "contract ContestTeamRegistry"
              }
            },
            "id": 2660,
            "nodeType": "InheritanceSpecifier",
            "src": "104:19:13"
          }
        ],
        "contractDependencies": [1714],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 2675,
        "linearizedBaseContracts": [2675, 1714],
        "name": "ContestTeamRegistryMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2665,
              "nodeType": "Block",
              "src": "173:2:13",
              "statements": []
            },
            "documentation": null,
            "id": 2666,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [],
                "id": 2663,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 2662,
                  "name": "ContestTeamRegistry",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1714,
                  "src": "151:19:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ContestTeamRegistry_$1714_$",
                    "typeString": "type(contract ContestTeamRegistry)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "151:21:13"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2661,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "141:2:13"
            },
            "returnParameters": {
              "id": 2664,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "173:0:13"
            },
            "scope": 2675,
            "src": "130:45:13",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2673,
              "nodeType": "Block",
              "src": "246:42:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2671,
                    "name": "approvedTeamsCount",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1110,
                    "src": "263:18:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2670,
                  "id": 2672,
                  "nodeType": "Return",
                  "src": "256:25:13"
                }
              ]
            },
            "documentation": null,
            "id": 2674,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getApprovedTeamsCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2667,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "211:2:13"
            },
            "returnParameters": {
              "id": 2670,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2669,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2674,
                  "src": "237:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2668,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "237:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "236:9:13"
            },
            "scope": 2675,
            "src": "181:107:13",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 2676,
        "src": "68:223:13"
      }
    ],
    "src": "0:292:13"
  },
  "legacyAST": {
    "absolutePath": "/home/odisi/dev/projects/hackapay/contracts/mocks/ContestTeamRegistryMock.sol",
    "exportedSymbols": {
      "ContestTeamRegistryMock": [2675]
    },
    "id": 2676,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2657,
        "literals": ["solidity", "^", "0.5", ".0"],
        "nodeType": "PragmaDirective",
        "src": "0:23:13"
      },
      {
        "absolutePath": "/home/odisi/dev/projects/hackapay/contracts/core/ContestTeamRegistry.sol",
        "file": "../core/ContestTeamRegistry.sol",
        "id": 2658,
        "nodeType": "ImportDirective",
        "scope": 2676,
        "sourceUnit": 1715,
        "src": "25:41:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2659,
              "name": "ContestTeamRegistry",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1714,
              "src": "104:19:13",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ContestTeamRegistry_$1714",
                "typeString": "contract ContestTeamRegistry"
              }
            },
            "id": 2660,
            "nodeType": "InheritanceSpecifier",
            "src": "104:19:13"
          }
        ],
        "contractDependencies": [1714],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 2675,
        "linearizedBaseContracts": [2675, 1714],
        "name": "ContestTeamRegistryMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2665,
              "nodeType": "Block",
              "src": "173:2:13",
              "statements": []
            },
            "documentation": null,
            "id": 2666,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [],
                "id": 2663,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 2662,
                  "name": "ContestTeamRegistry",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1714,
                  "src": "151:19:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ContestTeamRegistry_$1714_$",
                    "typeString": "type(contract ContestTeamRegistry)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "151:21:13"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2661,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "141:2:13"
            },
            "returnParameters": {
              "id": 2664,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "173:0:13"
            },
            "scope": 2675,
            "src": "130:45:13",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2673,
              "nodeType": "Block",
              "src": "246:42:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2671,
                    "name": "approvedTeamsCount",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1110,
                    "src": "263:18:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2670,
                  "id": 2672,
                  "nodeType": "Return",
                  "src": "256:25:13"
                }
              ]
            },
            "documentation": null,
            "id": 2674,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getApprovedTeamsCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2667,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "211:2:13"
            },
            "returnParameters": {
              "id": 2670,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2669,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2674,
                  "src": "237:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2668,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "237:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "236:9:13"
            },
            "scope": 2675,
            "src": "181:107:13",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 2676,
        "src": "68:223:13"
      }
    ],
    "src": "0:292:13"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-07-31T04:09:20.272Z",
  "devdoc": {
    "methods": {
      "approveTeam(uint256)": {
        "details": "Should be overwritten on inherited contract to add modifier or require statements for access control.",
        "params": {
          "teamId": "{uint256} the ids of the teams to be approved"
        }
      },
      "closeRegistration()": {
        "details": "Should be overwritten on inherited contract to add modifier or require statements for access control."
      },
      "closeSubmission()": {
        "details": "Should be overwritten on inherited contract to add modifier or require statements for access control."
      },
      "getRegistrationStatus()": {
        "return": "{bool} returns {true} if enabled; otherwise, {false}."
      },
      "getTeam(uint256)": {
        "params": {
          "teamId": "{uint256} the team's unique identifier returned on registration"
        },
        "return": "{bytes32} team's name{address} team's address{bytes32} team's proposal data{bool} team's status: {true} for approved; {false} for reproved;{uint256} team's grade"
      },
      "getTeamByAddress(address)": {
        "params": {
          "teamAddress": "{address} the team's contract address used on registration"
        },
        "return": "{bytes32} team's name{address} team's address{bytes32} team's proposal data{bool} team's status: {true} for approved; {false} for reproved;{uint256} team's grade"
      },
      "openRegistration()": {
        "details": "Should be overwritten on inherited contract to add modifier or require statements for access control."
      },
      "openSubmission()": {
        "details": "Should be overwritten on inherited contract to add modifier or require statements for access control."
      },
      "registerTeam(bytes32,address,bytes32)": {
        "details": "Registration process must be open.",
        "params": {
          "teamName": "{bytes32} team's proposal data; could be a hash for a file  on IPFS or for a github link; not required"
        }
      },
      "reproveTeam(uint256)": {
        "details": "Should be overwritten on inherited contract to add modifier or require statements for access control.",
        "params": {
          "teamId": "{uint256} the ids of the teams to be reproved"
        }
      },
      "reproveTeams(uint256[])": {
        "details": "Should be overwritten on inherited contract to add modifier or require statements for access control.",
        "params": {
          "teamIds": "{uint256[]} an array containing the ids of the teams to be reproved"
        }
      },
      "updateProposalData(uint256,bytes32)": {
        "params": {
          "proposalData": "the updated data for the team's proposal",
          "teamId": "team's unique identifier; required"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "approveTeam(uint256)": {
        "notice": "(re)approves a team in participating in the contest"
      },
      "closeRegistration()": {
        "notice": "Closes the registration process"
      },
      "closeSubmission()": {
        "notice": "Closes the proposal submission process"
      },
      "getRegistrationStatus()": {
        "notice": "Gets the registration status"
      },
      "getTeam(uint256)": {
        "notice": "Returns the stored information of a team"
      },
      "getTeamByAddress(address)": {
        "notice": "Returns the stored information of a team, based on a provided address"
      },
      "openRegistration()": {
        "notice": "Opens the registration process"
      },
      "openSubmission()": {
        "notice": "Opens the proposal submission process"
      },
      "registerTeam(bytes32,address,bytes32)": {
        "notice": "Registers a new team in the contest registry."
      },
      "reproveTeam(uint256)": {
        "notice": "reproves a team from participating in the contest"
      },
      "reproveTeams(uint256[])": {
        "notice": "reprove teams from participating in the contest"
      },
      "updateProposalData(uint256,bytes32)": {
        "notice": "Updates the proposal data for a specific team."
      }
    }
  }
}
